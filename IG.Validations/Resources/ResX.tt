<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    string path = Host.ResolvePath("");
    var files = Directory.GetFiles(path).Where(x => x.EndsWith(".resx"));
    Regex classNamePattern = new Regex(@".*\\(?<filename>.+)\.resx");

    foreach(var file in files) { 
        var classname = classNamePattern.Match(file).Groups["filename"].ToString();
        var namespacename = "IG.Validations.Resources"; //System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString();
        GenerateFile(namespacename, classname, file);
        SaveOutput(classname+".cs");
    }
#>
<#+

    void SaveOutput(string outputFileName)
    {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

  //<data name="InvalidValidationType" xml:space="preserve">
    //<value>Invalid Validationtype {0}</value>
    //<comment>@id(100)</comment>
  //</data>
//
    void GenerateMember(XElement data) {

        var data_name = data.Attribute("name").Value;
        var data_value= data.Element("value").Value;
        var data_comment= data.Element("comment").Value;
#>
        /// <summary>
        ///   Looks up a localized string for the resource '<#=data_name#>'.
        /// </summary>
        public static string <#= data_name #> {
            get {
                return ResourceManager.GetString("<#= data_name #>", resourceCulture);
            }
        }

<#+
        var data_id= "";    
        var regex_id = Regex.Match(data_comment, @"@id\((?<id>\d+)\)");
        if(regex_id.Success) {
            data_id = regex_id.Groups["id"].Value;
#>
        /// <summary>
        ///   Looks up the id for the resource '<#=data_name#>'.
        /// </summary>
        public static string <#= data_name #>Id {
            get {
                return "<#= data_id #>";
            }
        }

<#+
        }
        var countParams = Regex.Matches(data_value, @"{\d+}").Count;
        if( countParams > 0) {
            var regex_params = Regex.Match(data_comment, @"@params\(((,?\ ?(?<params>[a-z]+))*)\)", RegexOptions.IgnoreCase);
            List<string> data_params = new List<string>();
            if(regex_params.Success) {
                data_params= regex_params.Groups[1].Value.Split(',',' ').Select(x => x.Trim()).Where(x => !String.IsNullOrWhiteSpace(x)).ToList();
            }
            while(countParams > data_params.Count) {
                data_params.Add("object");
            }
            List<string> arguments = new List<string>(), variables= new List<string>();
            Enumerable.Range(0,countParams).ToList().ForEach(
                i => {
                arguments.Add(String.Format("{0} arg{1}", data_params[i], i));
                variables.Add(String.Format("arg{0}",i));
                });
#>
        /// <summary>
        ///   Looks up the formatable string for the resource '<#=data_name#>' inserts passed arguments
        /// </summary>
        public static string <#= data_name #>Format(<#= String.Join(", ", arguments) #>) {
            var fString = ResourceManager.GetString("<#= data_name #>", resourceCulture);
            return String.Format(fString, <#= String.Join(", ", variables) #>);
        }

<#+

        }

    }

    void GenerateFile(string namespacename, string classname, string path) {
        
        XElement doc = XElement.Load(path);
        var dataElements= doc.Elements("data");
        dataElements = dataElements.Where(x => x.Attribute("type") == null);

 #>
//------------------------------------------------------------------------------
// <auto-generated>
//      
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;

namespace <#= namespacename #> {


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class <#= classname #> 
    {
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal <#= classname #>() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("<#=            namespacename #>.<#=            classname #>", typeof(<#=            classname #>).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
<#+    dataElements.ToList().ForEach(GenerateMember); #>

    }
}
<#+ }




 #>





